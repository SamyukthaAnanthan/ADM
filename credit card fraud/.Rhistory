library(readr)
Credit_Card_Fraud_Detection1 <- read_csv("C:/Users/samyu/Desktop/Credit Card Fraud Detection1.csv")
View(Credit_Card_Fraud_Detection1)
# Detecting Credit Card Fraud
# Importing Datasets
library(ranger)
library(caret)
library(data.table)
# Data Exploration
dim(Credit_Card_Fraud_Detection1)
head(Credit_Card_Fraud_Detection1,6)
tail(Credit_Card_Fraud_Detection1,6)
table(Credit_Card_Fraud_Detection1$TARGET)
summary(Credit_Card_Fraud_Detection1$AMT_CREDIT)
names(Credit_Card_Fraud_Detection1)
var(Credit_Card_Fraud_Detection1$AMT_CREDIT)
sd(Credit_Card_Fraud_Detection1$AMT_CREDIT)
# Data Manipulation
head(Credit_Card_Fraud_Detection1)
Credit_Card_Fraud_Detection1$AMT_CREDIT=scale(Credit_Card_Fraud_Detection1$AMT_CREDIT)
NewData=Credit_Card_Fraud_Detection1[,-c(1)]
head(NewData)
# Data Modelling
library(caTools)
set.seed(123)
data_sample = sample.split(NewData$TARGET,SplitRatio=0.80)
train_data = subset(NewData,data_sample==TRUE)
test_data = subset(NewData,data_sample==FALSE)
dim(train_data)
dim(test_data)
# Fitting Logistic Regression Model
Logistic_Model=glm(TARGET~.,test_data,family=binomial())
# Visualizing summarized model through the following plots
plot(Logistic_Model)
# ROC Curve to assess the performance of the model
library(pROC)
lr.predict <- predict(Logistic_Model,test_data, probability = TRUE)
# Fitting a Decision Tree Model
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(Class ~ . , creditcard_data, method = 'class')
# Fitting a Decision Tree Model
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(TARGET ~ . , Credit_Card_Fraud_Detection1, method = 'class')
predicted_val <- predict(decisionTree_model, Credit_Card_Fraud_Detection1, type = 'class')
probability <- predict(decisionTree_model, Credit_Card_Fraud_Detection1, type = 'prob')
rpart.plot(decisionTree_model)
# Gradient Boosting (GBM)
library(gbm, quietly=TRUE)
gbm.fit <- gbm(
formula = TARGET ~ .,
distribution = "bernoulli",
data = train_data,
n.trees = 10000,
interaction.depth = 1,
shrinkage = 0.001,
cv.folds = 5,
n.cores = NULL, # will use all cores by default
verbose = FALSE
)
library(readr)
Credit_Card_Fraud_Detection1 <- read_csv("C:/Users/samyu/Desktop/Credit Card Fraud Detection1.csv")
View(Credit_Card_Fraud_Detection1)
# Detecting Credit Card Fraud
# Importing Datasets
library(ranger)
library(caret)
library(data.table)
# Data Exploration
dim(Credit_Card_Fraud_Detection1)
head(Credit_Card_Fraud_Detection1,6)
tail(Credit_Card_Fraud_Detection1,6)
table(Credit_Card_Fraud_Detection1$TARGET)
summary(Credit_Card_Fraud_Detection1$AMT_CREDIT)
names(Credit_Card_Fraud_Detection1)
var(Credit_Card_Fraud_Detection1$AMT_CREDIT)
sd(Credit_Card_Fraud_Detection1$AMT_CREDIT)
# Data Manipulation
head(Credit_Card_Fraud_Detection1)
Credit_Card_Fraud_Detection1$AMT_CREDIT=scale(Credit_Card_Fraud_Detection1$AMT_CREDIT)
NewData=Credit_Card_Fraud_Detection1[,-c(1)]
head(NewData)
# Data Modelling
library(caTools)
set.seed(123)
data_sample = sample.split(NewData$TARGET,SplitRatio=0.80)
train_data = subset(NewData,data_sample==TRUE)
test_data = subset(NewData,data_sample==FALSE)
dim(train_data)
dim(test_data)
# Fitting Logistic Regression Model
Logistic_Model=glm(TARGET~.,test_data,family=binomial())
# Visualizing summarized model through the following plots
plot(Logistic_Model)
# Fitting a Decision Tree Model
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(TARGET ~ . , Credit_Card_Fraud_Detection1, method = 'class')
predicted_val <- predict(decisionTree_model, Credit_Card_Fraud_Detection1, type = 'class')
probability <- predict(decisionTree_model, Credit_Card_Fraud_Detection1, type = 'prob')
rpart.plot(decisionTree_model)
# Gradient Boosting (GBM)
library(gbm, quietly=TRUE)
gbm.fit <- gbm(
+     formula = TARGET ~ .,
gbm.fit <- gbm(
formula = Sale_Price ~ .,
distribution = "gaussian",
data = ames_train,
n.trees = 10000,
interaction.depth = 1,
shrinkage = 0.001,
cv.folds = 5,
n.cores = NULL, # will use all cores by default
verbose = FALSE
)
gbm.fit <- gbm(
formula = TARGET ~ .,
distribution = "gaussian",
data = train_data,
n.trees = 10000,
interaction.depth = 1,
shrinkage = 0.001,
cv.folds = 5,
n.cores = NULL, # will use all cores by default
verbose = FALSE
)
gbm.fit <- gbm(
+     formula = TARGET ~ .,
gbm.fit <- gbm(
+     TARGET$model <- as.factor(TARGET$model),
+     distribution = "bernoulli",
gbm.fit <- gbm(
+     TARGET$model <- as.factor(TARGET$model),
+     distribution <- "bernoulli",
+     data <- train_data,
+     n.trees <- 10000,
+     interaction.depth <- 1,
+     shrinkage <- 0.001,
+     cv.folds <- 5,
+     n.cores <- NULL, # will use all cores by default
+     verbose <- FALSE
)
as.factor(Target$model)
as.factor(class$model)
gbm.fit <- gbm(
+     class$model <- as.factor(class$model),
+     distribution = "bernoulli",
gbm.fit <- gbm(
+     +     TARGET$model <- as.factor(TARGET$model),
+     +     distribution <- "bernoulli",
+     +     data <- train_data,
+     +     n.trees <- 10000,
+     +     interaction.depth <- 1,
+     +     shrinkage <- 0.001,
+     +     cv.folds <- 5,
+     +     n.cores <- NULL, # will use all cores by default
+     +     verbose <- FALSE
library(gbm, quietly=TRUE)
gbm.fit <- gbm(
TARGET$model <- as.factor(TARGET$model)
distribution <- "bernoulli",
library(gbm, quietly=TRUE)
gbm.fit <- gbm(
class$model <- as.factor(class$model)
distribution <- "bernoulli",
