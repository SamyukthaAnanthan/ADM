test_data = subset(NewData,data_sample==FALSE)
dim(train_data)
dim(test_data)
# Fitting Logistic Regression Model
Logistic_Model=glm(TARGET~.,test_data,family=binomial())
summary(Logistic_Model)
gc()
gcinfo(TRUE)
gc()
gcinfo(TRUE)
r -e'N<-3*10^3; M<-matrix(rnorm(N*N),ncol=N); print(system.time(crossprod(M)))'
e'N<-3*10^3; M<-matrix(rnorm(N*N),ncol=N); print(system.time(crossprod(M)))'
# Detecting Credit Card Fraud
> # Importing Datasets
library(readr)
Credit_Card_Fraud_Detection1 <- read_csv("C:/Users/samyu/Desktop/Credit Card Fraud Detection1.csv")
View(Credit_Card_Fraud_Detection1)
library(readr)
Credit_Card_Fraud_Detection1 <- read_csv("C:/Users/samyu/Desktop/Credit Card Fraud Detection1.csv")
View(Credit_Card_Fraud_Detection1)
View(Credit_Card_Fraud_Detection1)
library(readr)
Credit_Card_Fraud_Detection1 <- read_csv("C:/Users/samyu/Desktop/Credit Card Fraud Detection1.csv")
View(Credit_Card_Fraud_Detection1)
library(readr)
Credit_Card_Fraud_Detection1 <- read_csv("C:/Users/samyu/Desktop/Credit Card Fraud Detection1.csv")
View(Credit_Card_Fraud_Detection1)
# Detecting Credit Card Fraud
# Importing Datasets
library(ranger)
library(caret)
library(data.table)
# Data Exploration
dim(Credit_Card_Fraud_Detection1)
head(Credit_Card_Fraud_Detection1,6)
tail(Credit_Card_Fraud_Detection1,6)
table(Credit_Card_Fraud_Detection1$TARGET)
summary(Credit_Card_Fraud_Detection1$AMT_CREDIT)
names(Credit_Card_Fraud_Detection1)
var(Credit_Card_Fraud_Detection1$AMT_CREDIT)
sd(Credit_Card_Fraud_Detection1$AMT_CREDIT)
# Data Manipulation
head(Credit_Card_Fraud_Detection1)
Credit_Card_Fraud_Detection1$AMT_CREDIT=scale(Credit_Card_Fraud_Detection1$AMT_CREDIT)
NewData=Credit_Card_Fraud_Detection1[,-c(1)]
head(NewData)
# Data Modelling
library(caTools)
set.seed(123)
data_sample = sample.split(NewData$TARGET,SplitRatio=0.80)
train_data = subset(NewData,data_sample==TRUE)
test_data = subset(NewData,data_sample==FALSE)
dim(train_data)
dim(test_data)
# Fitting Logistic Regression Model
Logistic_Model=glm(TARGET~.,test_data,family=binomial())
# Visualizing summarized model through the following plots
plot(Logistic_Model)
# Visualizing summarized model through the following plotsplot(Logistic_Model)
# Visualizing summarized model through the following plots
> plot(Logistic_Model)
# Visualizing summarized model through the following plots
plot(Logistic_Model)
# ROC Curve to assess the performance of the model
library(pROC)
lr.predict <- predict(Logistic_Model,test_data, probability = TRUE)
# Determine best iteration based on test data
gbm.iter = gbm.perf(model_gbm, method = "test")
# Fitting a Decision Tree Model
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
# Fitting a Decision Tree Model
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(TARGET ~ . , Credit_Card_Fraud_Detection1, method = 'TARGET')
# Fitting a Decision Tree Model
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(Class ~ . , Credit_Card_Fraud_Detection1, method = 'class')
# Determine best iteration based on test data
gbm.iter = gbm.perf(model_gbm, method = "test")
# Gradient Boosting (GBM)
library(gbm, quietly=TRUE)
install.packages("gbm")
# Gradient Boosting (GBM)
library(gbm, quietly=TRUE)
# Determine best iteration based on test data
gbm.iter = gbm.perf(model_gbm, method = "test")
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)# Get the time to train the GBM model
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
# Detecting Credit Card Fraud
# Importing Datasets
library(ranger)
library(caret)
library(data.table)
# Data Exploration
dim(Credit_Card_Fraud_Detection1)
head(Credit_Card_Fraud_Detection1,6)
tail(Credit_Card_Fraud_Detection1,6)
table(Credit_Card_Fraud_Detection1$TARGET)
summary(Credit_Card_Fraud_Detection1$AMT_CREDIT)
names(Credit_Card_Fraud_Detection1)
var(Credit_Card_Fraud_Detection1$AMT_CREDIT)
sd(Credit_Card_Fraud_Detection1$AMT_CREDIT)
# Data Manipulation
head(Credit_Card_Fraud_Detection1)
Credit_Card_Fraud_Detection1$AMT_CREDIT=scale(Credit_Card_Fraud_Detection1$AMT_CREDIT)
NewData=Credit_Card_Fraud_Detection1[,-c(1)]
head(NewData)
# Data Modelling
library(caTools)
set.seed(123)
data_sample = sample.split(NewData$TARGET,SplitRatio=0.80)
train_data = subset(NewData,data_sample==TRUE)
test_data = subset(NewData,data_sample==FALSE)
dim(train_data)
dim(test_data)
# Fitting Logistic Regression Model
Logistic_Model=glm(TARGET~.,test_data,family=binomial())
# Visualizing summarized model through the following plots
plot(Logistic_Model)
install.packages("pROC")
# ROC Curve to assess the performance of the model
library(pROC)
lr.predict <- predict(Logistic_Model,test_data, probability = TRUE)
# Fitting a Decision Tree Model
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(TARGET ~ . , creditcard_data, method = 'class')
# Fitting a Decision Tree Model
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(TARGET ~ . , Credit_Card_Fraud_Detection1, method = 'class')
predicted_val <- predict(decisionTree_model, Credit_Card_Fraud_Detection1, type = 'class')
probability <- predict(decisionTree_model, Credit_Card_Fraud_Detection1, type = 'prob')
rpart.plot(decisionTree_model)
# Gradient Boosting (GBM)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
# Determine best iteration based on test data
gbm.iter = gbm.perf(model_gbm, method = "test")
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
lr_predict <- predict(lm,train_data, probability = TRUE)
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(TARGET ~ . ,Credit_Card_Fraud_Detection1, method = 'class')
predicted_val <- predict(decisionTree_model,Credit_Card_Fraud_Detection1, type = 'class')
probability <- predict(decisionTree_model,Credit_Card_Fraud_Detection1, type = 'prob')
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(TARGET ~ . , df, method = 'class')
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(Class ~ . , df, method = 'class')
library(rpart)
library(rpart.plot)
decisionTree_model <- rpart(TARGET ~ . ,Credit_Card_Fraud_Detection1, method = 'class')
predicted_val <- predict(decisionTree_model, Credit_Card_Fraud_Detection1, type = 'class')
probability <- predict(decisionTree_model, Credit_Card_Fraud_Detection1, type = 'prob')
rpart.plot(decisionTree_model)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
install.packages("neuralnet")
# Artificial Neural Network
library(neuralnet)
ANN_model =neuralnet (Class~.,train_data,linear.output=FALSE)
# Artificial Neural Network
library(neuralnet)
ANN_model =neuralnet (TARGET~.,train_data,linear.output=FALSE)
library(gbm)
GradientBoostingModel<-gbm(formula = response~.,
distribution = "bernoulli"
data = train_data,
library(gbm)
> GradientBoostingModel<-gbm(formula = response~.,
library(gbm)
GradientBoostingModel<-gbm(formula = response~.,)
GradientBoostingModel<-gbm(formula = response~.,)
library(gbm)
GrdadientBoostingModel<-gbm(formula = response~.,
distribution = "bernoulli"
data = train_data
library(gbm)
> GrdadientBoostingModel<-gbm(formula = response~.,
library(gbm)
> GrdadientBoostingModel<-gbm(formula = response~.,
library(gbm)
GrdadientBoostingModel<-gbm(formula = response~.,
+ distribution = "bernoulli"
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = train,
, n.trees = 500
)
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
)
library(gbm, quietly=TRUE)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
)
)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = train_data
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
library(gbm, quietly=TRUE)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = train_data
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
# Get the time to train the GBM model
system.time(
model_gbm <- as.factor(model_gbm) ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
install.packages("ROCR")
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = train_data
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
)
)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = train_data
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
train_data$model <- as.factor(train_data$model) )
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train.fraction = nrow(train_data) / (nrow(train_data) + nrow(test_data))
train_data$model <- as.factor(train_data$model) )
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(Class ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train_data$model <- as.factor(train_data$model)
)
)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = rbind(train_data, test_data)
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train_data$model <- as.factor(train_data$model)
)
)
# Get the time to train the GBM model
system.time(
model_gbm <- gbm(TARGET ~ .
, distribution = "bernoulli"
, data = train_data
, n.trees = 500
, interaction.depth = 3
, n.minobsinnode = 100
, shrinkage = 0.01
, bag.fraction = 0.5
, train_data$model <- as.factor(train_data$model)
)
)
